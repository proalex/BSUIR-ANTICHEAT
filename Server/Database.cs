#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Database
{
    using System.Data.Linq.Mapping;
    using System.ComponentModel;
	using System;
	
	
	public partial class Anticheat : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFileChecks(FileChecks instance);
    partial void UpdateFileChecks(FileChecks instance);
    partial void DeleteFileChecks(FileChecks instance);
    partial void InsertMemoryChecks(MemoryChecks instance);
    partial void UpdateMemoryChecks(MemoryChecks instance);
    partial void DeleteMemoryChecks(MemoryChecks instance);
    partial void InsertMemoryPatterns(MemoryPatterns instance);
    partial void UpdateMemoryPatterns(MemoryPatterns instance);
    partial void DeleteMemoryPatterns(MemoryPatterns instance);
    partial void InsertModuleChecks(ModuleChecks instance);
    partial void UpdateModuleChecks(ModuleChecks instance);
    partial void DeleteModuleChecks(ModuleChecks instance);
    partial void InsertViolationLog(ViolationLog instance);
    partial void UpdateViolationLog(ViolationLog instance);
    partial void DeleteViolationLog(ViolationLog instance);
    partial void InsertWindowChecks(WindowChecks instance);
    partial void UpdateWindowChecks(WindowChecks instance);
    partial void DeleteWindowChecks(WindowChecks instance);
    #endregion
		
		public Anticheat(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Anticheat(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Anticheat(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Anticheat(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<FileChecks> FileChecks
		{
			get
			{
				return this.GetTable<FileChecks>();
			}
		}
		
		public System.Data.Linq.Table<MemoryChecks> MemoryChecks
		{
			get
			{
				return this.GetTable<MemoryChecks>();
			}
		}
		
		public System.Data.Linq.Table<MemoryPatterns> MemoryPatterns
		{
			get
			{
				return this.GetTable<MemoryPatterns>();
			}
		}
		
		public System.Data.Linq.Table<ModuleChecks> ModuleChecks
		{
			get
			{
				return this.GetTable<ModuleChecks>();
			}
		}
		
		public System.Data.Linq.Table<ViolationLog> ViolationLog
		{
			get
			{
				return this.GetTable<ViolationLog>();
			}
		}
		
		public System.Data.Linq.Table<WindowChecks> WindowChecks
		{
			get
			{
				return this.GetTable<WindowChecks>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FileChecks")]
	public partial class FileChecks : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Path;
		
		private string _Hash;
		
		private bool _Exist;
		
		private bool _Kick;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnHashChanging(string value);
    partial void OnHashChanged();
    partial void OnExistChanging(bool value);
    partial void OnExistChanged();
    partial void OnKickChanging(bool value);
    partial void OnKickChanged();
    #endregion
		
		public FileChecks()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(260) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hash", DbType="Char(32) NOT NULL", CanBeNull=false)]
		public string Hash
		{
			get
			{
				return this._Hash;
			}
			set
			{
				if ((this._Hash != value))
				{
					this.OnHashChanging(value);
					this.SendPropertyChanging();
					this._Hash = value;
					this.SendPropertyChanged("Hash");
					this.OnHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exist", DbType="Bit NOT NULL")]
		public bool Exist
		{
			get
			{
				return this._Exist;
			}
			set
			{
				if ((this._Exist != value))
				{
					this.OnExistChanging(value);
					this.SendPropertyChanging();
					this._Exist = value;
					this.SendPropertyChanged("Exist");
					this.OnExistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kick", DbType="Bit NOT NULL")]
		public bool Kick
		{
			get
			{
				return this._Kick;
			}
			set
			{
				if ((this._Kick != value))
				{
					this.OnKickChanging(value);
					this.SendPropertyChanging();
					this._Kick = value;
					this.SendPropertyChanged("Kick");
					this.OnKickChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MemoryChecks")]
	public partial class MemoryChecks : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ModuleName;
		
		private long _Offset;
		
		private int _Size;
		
		private string _Hash;
		
		private bool _Exist;
		
		private bool _Kick;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnModuleNameChanging(string value);
    partial void OnModuleNameChanged();
    partial void OnOffsetChanging(long value);
    partial void OnOffsetChanged();
    partial void OnSizeChanging(int value);
    partial void OnSizeChanged();
    partial void OnHashChanging(string value);
    partial void OnHashChanged();
    partial void OnExistChanging(bool value);
    partial void OnExistChanged();
    partial void OnKickChanging(bool value);
    partial void OnKickChanged();
    #endregion
		
		public MemoryChecks()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModuleName", DbType="NVarChar(255)")]
		public string ModuleName
		{
			get
			{
				return this._ModuleName;
			}
			set
			{
				if ((this._ModuleName != value))
				{
					this.OnModuleNameChanging(value);
					this.SendPropertyChanging();
					this._ModuleName = value;
					this.SendPropertyChanged("ModuleName");
					this.OnModuleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offset", DbType="BigInt NOT NULL")]
		public long Offset
		{
			get
			{
				return this._Offset;
			}
			set
			{
				if ((this._Offset != value))
				{
					this.OnOffsetChanging(value);
					this.SendPropertyChanging();
					this._Offset = value;
					this.SendPropertyChanged("Offset");
					this.OnOffsetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Int NOT NULL")]
		public int Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hash", DbType="Char(32) NOT NULL", CanBeNull=false)]
		public string Hash
		{
			get
			{
				return this._Hash;
			}
			set
			{
				if ((this._Hash != value))
				{
					this.OnHashChanging(value);
					this.SendPropertyChanging();
					this._Hash = value;
					this.SendPropertyChanged("Hash");
					this.OnHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exist", DbType="Bit NOT NULL")]
		public bool Exist
		{
			get
			{
				return this._Exist;
			}
			set
			{
				if ((this._Exist != value))
				{
					this.OnExistChanging(value);
					this.SendPropertyChanging();
					this._Exist = value;
					this.SendPropertyChanged("Exist");
					this.OnExistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kick", DbType="Bit NOT NULL")]
		public bool Kick
		{
			get
			{
				return this._Kick;
			}
			set
			{
				if ((this._Kick != value))
				{
					this.OnKickChanging(value);
					this.SendPropertyChanging();
					this._Kick = value;
					this.SendPropertyChanged("Kick");
					this.OnKickChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MemoryPatterns")]
	public partial class MemoryPatterns : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Pattern;
		
		private long _Count;
		
		private bool _Exist;
		
		private bool _Kick;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPatternChanging(string value);
    partial void OnPatternChanged();
    partial void OnCountChanging(long value);
    partial void OnCountChanged();
    partial void OnExistChanging(bool value);
    partial void OnExistChanged();
    partial void OnKickChanging(bool value);
    partial void OnKickChanged();
    #endregion
		
		public MemoryPatterns()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pattern", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string Pattern
		{
			get
			{
				return this._Pattern;
			}
			set
			{
				if ((this._Pattern != value))
				{
					this.OnPatternChanging(value);
					this.SendPropertyChanging();
					this._Pattern = value;
					this.SendPropertyChanged("Pattern");
					this.OnPatternChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Count", DbType="BigInt NOT NULL")]
		public long Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exist", DbType="Bit NOT NULL")]
		public bool Exist
		{
			get
			{
				return this._Exist;
			}
			set
			{
				if ((this._Exist != value))
				{
					this.OnExistChanging(value);
					this.SendPropertyChanging();
					this._Exist = value;
					this.SendPropertyChanged("Exist");
					this.OnExistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kick", DbType="Bit NOT NULL")]
		public bool Kick
		{
			get
			{
				return this._Kick;
			}
			set
			{
				if ((this._Kick != value))
				{
					this.OnKickChanging(value);
					this.SendPropertyChanging();
					this._Kick = value;
					this.SendPropertyChanged("Kick");
					this.OnKickChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModuleChecks")]
	public partial class ModuleChecks : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Hash;
		
		private bool _Exist;
		
		private bool _Kick;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnHashChanging(string value);
    partial void OnHashChanged();
    partial void OnExistChanging(bool value);
    partial void OnExistChanged();
    partial void OnKickChanging(bool value);
    partial void OnKickChanged();
    #endregion
		
		public ModuleChecks()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hash", DbType="Char(32) NOT NULL", CanBeNull=false)]
		public string Hash
		{
			get
			{
				return this._Hash;
			}
			set
			{
				if ((this._Hash != value))
				{
					this.OnHashChanging(value);
					this.SendPropertyChanging();
					this._Hash = value;
					this.SendPropertyChanged("Hash");
					this.OnHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exist", DbType="Bit NOT NULL")]
		public bool Exist
		{
			get
			{
				return this._Exist;
			}
			set
			{
				if ((this._Exist != value))
				{
					this.OnExistChanging(value);
					this.SendPropertyChanging();
					this._Exist = value;
					this.SendPropertyChanged("Exist");
					this.OnExistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kick", DbType="Bit NOT NULL")]
		public bool Kick
		{
			get
			{
				return this._Kick;
			}
			set
			{
				if ((this._Kick != value))
				{
					this.OnKickChanging(value);
					this.SendPropertyChanging();
					this._Kick = value;
					this.SendPropertyChanged("Kick");
					this.OnKickChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ViolationLog")]
	public partial class ViolationLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _IP;
		
		private byte _Type;
		
		private int _CheckNumber;
		
		private System.DateTime _Time;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    partial void OnCheckNumberChanging(int value);
    partial void OnCheckNumberChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    #endregion
		
		public ViolationLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP", DbType="VarChar(39) NOT NULL", CanBeNull=false)]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="TinyInt NOT NULL")]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckNumber", DbType="Int NOT NULL")]
		public int CheckNumber
		{
			get
			{
				return this._CheckNumber;
			}
			set
			{
				if ((this._CheckNumber != value))
				{
					this.OnCheckNumberChanging(value);
					this.SendPropertyChanging();
					this._CheckNumber = value;
					this.SendPropertyChanged("CheckNumber");
					this.OnCheckNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WindowChecks")]
	public partial class WindowChecks : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private bool _Exist;
		
		private bool _Kick;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnExistChanging(bool value);
    partial void OnExistChanged();
    partial void OnKickChanging(bool value);
    partial void OnKickChanged();
    #endregion
		
		public WindowChecks()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exist", DbType="Bit NOT NULL")]
		public bool Exist
		{
			get
			{
				return this._Exist;
			}
			set
			{
				if ((this._Exist != value))
				{
					this.OnExistChanging(value);
					this.SendPropertyChanging();
					this._Exist = value;
					this.SendPropertyChanged("Exist");
					this.OnExistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kick", DbType="Bit NOT NULL")]
		public bool Kick
		{
			get
			{
				return this._Kick;
			}
			set
			{
				if ((this._Kick != value))
				{
					this.OnKickChanging(value);
					this.SendPropertyChanging();
					this._Kick = value;
					this.SendPropertyChanged("Kick");
					this.OnKickChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
